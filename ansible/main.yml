---
- name: Install docker
  hosts: all
  tasks:

    - name: Get package facts
      package_facts:

    - name: Skip if docker installed
      meta: end_play
      when: "'docker-ce' in ansible_facts.packages"

    - name: Install ca-certificates curl
      apt:
        update_cache: yes
        pkg:
        - ca-certificates
        - curl

    - name: Create keyring dir
      file:
        path: /etc/apt/keyrings/
        state: directory
        mode: '0755'

    - name: Download key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: a+r

    - name: Add repo
      apt_repository:
        repo: 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'

    - name: Install packages
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin

- name: Deploy linux_tweet_app
  hosts: all
  tasks:

    - name: Checkout repo
      git:
        repo: https://github.com/dockersamples/linux_tweet_app
        dest: /srv/linux_tweet_app

    - name: Build image
      docker_image:
        name: linux_tweet_app
        build:
          path: /srv/linux_tweet_app
        source: build

    - name: Create cert dirs
      file:
        path: /srv/linux_tweet_app/{{ item }}/
        state: directory
        mode: '0600'
      loop:
        - csr
        - ssl

    - name: Generate private cert key
      openssl_privatekey:
        path: /srv/linux_tweet_app/ssl/{{ inventory_hostname }}.key

    - name: Create list of dns names
      set_fact:
        hostname:
        - '{{ inventory_hostname }}'
        - www.{{ inventory_hostname }}

    - name: Create certificate signing request
      openssl_csr:
        path: /srv/linux_tweet_app/csr/{{ inventory_hostname }}.csr
        privatekey_path: /srv/linux_tweet_app/ssl/{{ inventory_hostname }}.key
        subject_alt_name: "{{ hostname | map('regex_replace', '^', 'DNS:') | list }}"

    - name: Generate acme account key
      openssl_privatekey:
        path: /srv/linux_tweet_app/csr/acme_account.key
        passphrase: '{{ acme_key_passphrase }}'
        cipher: auto

    - name: Create cert challenge
      acme_certificate:
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        terms_agreed: true
        acme_version: 2
        account_key_src: /srv/linux_tweet_app/csr/acme_account.key
        account_key_passphrase: '{{ acme_key_passphrase }}'
        account_email: igor.d.melnikov62@gmail.com
        csr: /srv/linux_tweet_app/csr/{{ inventory_hostname }}.csr
        fullchain_dest: /srv/linux_tweet_app/ssl/{{ inventory_hostname }}.crt
      register: cert_challenge

    - name: Create challenge dirs
      file:
        path: /srv/linux_tweet_app/html/{{ item.value['http-01']['resource'] | dirname }}
        state: directory
        mode: '0755'
      loop: '{{ cert_challenge.challenge_data | dict2items }}'
      when: cert_challenge is changed

    - name: Copy challenges
      copy:
        dest: /srv/linux_tweet_app/html/{{ item.value['http-01']['resource'] }}
        content: "{{ item.value['http-01']['resource_value'] }}"
      loop: '{{ cert_challenge.challenge_data | dict2items }}'
      when: cert_challenge is changed

    - name: Run linux_tweet_app with challenges
      docker_container:
        pull: never
        name: linux_tweet_app
        image: linux_tweet_app
        ports:
        - '80:80'
        mounts:
          - type: bind
            source: /srv/linux_tweet_app/html/
            target: /usr/share/nginx/html/
      when: cert_challenge is changed

    - name: Let challenge be validated
      acme_certificate:
        acme_directory: https://acme-v02.api.letsencrypt.org/directory
        acme_version: 2
        account_key_src: /srv/linux_tweet_app/csr/acme_account.key
        account_key_passphrase: '{{ acme_key_passphrase }}'
        csr: /srv/linux_tweet_app/csr/{{ inventory_hostname }}.csr
        fullchain_dest: /srv/linux_tweet_app/ssl/{{ inventory_hostname }}.crt
        data: '{{ cert_challenge }}'
      when: cert_challenge is changed

    - name: Copy nginx.conf
      copy:
        src: nginx.conf
        dest: /srv/linux_tweet_app/nginx.conf

    - name: Run linux_tweet_app
      docker_container:
        pull: never
        name: linux_tweet_app
        image: linux_tweet_app
        ports:
        - '80:80'
        - '443:443'
        mounts:
          - type: bind
            source: /srv/linux_tweet_app/nginx.conf
            target: /etc/nginx/nginx.conf
          - type: bind
            source: /srv/linux_tweet_app/ssl/
            target: /etc/ssl/
